% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KL.S4.R
\name{KL.S4}
\alias{KL.S4}
\title{Estimate number of clusters and sparsity parameter simultaneously by S4.}
\usage{
KL.S4(
  x,
  lambda_list,
  trim = 0.05,
  k_vector = c(2, 3, 4),
  n.resample = 25,
  num.cores = 1
)
}
\arguments{
\item{x}{data matrix, where rows represent samples and columns represents features}

\item{lambda_list}{a list whose length is equal to k_vector. Every element is a vector of lambda
as the search region for this K.}

\item{trim}{Percentage of trim by S4 method.}

\item{k_vector}{The search pool for number of clusters}

\item{n.resample}{Number of subsampling, Usually needed to be larger than 20}

\item{num.cores}{Number of cpus used in parallel computing. It is suggest to run large num_cores
in servers instead of laptops.}
}
\value{
A list of two components:
\itemize{
\item{clus_score: }{Cluster stability score for every K and lambda.}
\item{final_score: }{The average of cluster stability score and feature stability
score for every K and lambda}
\item{optimal_k: }{Optimal number of clusters}
\item{optimal_lambda: }{Optimal lambda}
}
}
\description{
Estimate number of clusters and sparsity parameter simultaneously by S4.
}
\examples{
\dontrun{
#generate simulation II data
data<-Sim2(h=200,q = 50,u=0.8)#For demo purpose, we use 200 features in total for fast result.
#using Efficient Algorithm for Choosing Grids of lambda for each K
k_vector<-2:7#search K from 2 to 7
wbounds_list<-list(1)
for(l in 1:length(k_vector)){#for each K, using the algorithm to get 20 lambda.
 wbounds_list[[l]] = region.lambda(lam1=1.5,iteration=20,data,k_vector[l])
}
#This part of code is to delete the lambda which selecting all the genes.
#since our S4 method calculate specificity, the lambda selecting all the genes must be removed.
for(l in 1:length(k_vector)){
 temp<-KMeansSparseCluster(data,K=k_vector[l],wbounds=wbounds_list[[l]],nstart=100)
 num<-rep(0,length(temp))
 for(i in 1:length(num)){
   num[i]<-sum(temp[[i]]$ws>0)
 }
 if(sum(num==ncol(data))>0){
   wbounds_list[[l]]<-wbounds_list[[l]][1:(min(which(num==ncol(data)))-3)]
 }
}
#run S4 method
res.S4<-KL.S4(x=data,lambda_list = wbounds_list,k_vector = k_vector,trim =0.05,n.resample = 50,num.cores = 1)
}
}
